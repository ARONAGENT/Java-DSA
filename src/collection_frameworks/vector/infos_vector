### üî∑ What is Vector in Java?

- `Vector` is a class in Java that implements the **List** interface.
- It is part of the Java Collection Framework.
- Introduced in Java 1.0, it was initially part of legacy collections (like `Hashtable`, `Enumeration`), but later restructured under `java.util` package in the Collections Framework.

---

### üì¶Where does Vector fit in Collection Framework?
         Collection
            |
      -------List -------
     /        |         \
 ArrayList  LinkedList  Vector

- `Vector` implements:
  - `List` ‚Üí for ordered collection
  - `RandomAccess` ‚Üí for fast index-based access
  - `Cloneable` ‚Üí supports object cloning
  - `Serializable` ‚Üí supports serialization

---

### üîë **Key Properties of Vector**
-------------------------------------------------------------------------------------------------------------
| Property                    | Description                                                                 |
|-----------------------------|-----------------------------------------------------------------------------|
| Ordered                     | Maintains insertion order                                                   |
| Duplicates Allowed          | Yes, you can store duplicate elements                                       |
| Null Allowed                | Yes, null elements are allowed                                              |
| Index-Based Access          | Yes, you can get or set elements using `get(index)` or `set(index, value)`  |
| Resizable                   | Grows automatically when full                                               |
| Thread-Safe (Synchronized)  | ‚úÖ Yes, methods are synchronized internally                                 |
| Performance                 | ‚ùå Slower compared to `ArrayList` due to synchronization overhead           |
| Growable Capacity           | Increases capacity by **doubling** the size when full                       |
| Fail-Safe Iterator          | ‚ùå No, throws `ConcurrentModificationException` in concurrent modification  |
-------------------------------------------------------------------------------------------------------------
---

### üìå **Vector is Synchronized (Not Non-Synchronized)**

‚ùóCorrection: Vector is synchronized by default, which means:

- All its methods (like `add`, `remove`, `get`) are thread-safe.
- But, it's not recommended in modern multithreaded applications because:
  - It synchronizes every method, even when not needed.
  - Instead, prefer `Collections.synchronizedList()` or `CopyOnWriteArrayList`for better performance.

---

### üß† **Internal Working**

- Internally uses a **dynamic array**.
- **Initial capacity** is 10.
- **Capacity doubles** each time the array becomes full:
  ```java
  newCapacity = oldCapacity * 2;
  ```

---

### üîÅ **Commonly Used Methods in Vector**
---------------------------------------------------------------------------------------------------
| Method                          | Description                                                   |
|---------------------------------|---------------------------------------------------------------|
| `add(E e)`                      | Add element to end                                            |
| `add(int index, E e)`           | Insert at index                                               |
| `get(int index)`                | Get element at index                                          |
| `set(int index, E e)`           | Replace element                                               |
| `remove(int index)`             | Remove by index                                               |
| `remove(Object o)`              | Remove by value                                               |
| `contains(Object o)`            | Check if exists                                               |
| `indexOf(Object o)`             | First index of object                                         |
| `lastIndexOf(Object o)`         | Last index of object                                          |
| `clear()`                       | Remove all elements                                           |
| `size()`                        | Returns current size                                          |
| `capacity()`                    | Returns current capacity of the vector                        |
| `clone()`                       | Returns a shallow copy                                        |
| `elementAt(int index)`          | Legacy method to access elements                              |
| `addElement(E e)`               | Legacy method to add elements                                 |
| `firstElement()` & `lastElement()` | Returns first or last element                              |
| `toArray()`                     | Convert to array                                              |
| `iterator()`                    | Returns iterator                                              |
| `removeAllElements()`           | Legacy method to clear vector                                 |
---------------------------------------------------------------------------------------------------

---

### üÜö Vector vs ArrayList
----------------------------------------------------------------------------
| Feature         | Vector                    | ArrayList                  |
|---------------- |---------------------------|----------------------------|
| Thread-Safety   | ‚úÖ Synchronized           | ‚ùå Not synchronized        |
| Performance     | ‚ùå Slower (due to sync)   | ‚úÖ Faster                  |
| Growth          | Doubles capacity          | Grows by 50%               |
| Preferred in    | Legacy multithreading     | Modern applications        |
----------------------------------------------------------------------------
---
