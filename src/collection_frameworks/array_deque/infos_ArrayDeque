## üìå **ArrayDeque in Java**

`ArrayDeque` (Array Double Ended Queue) is a **resizable-array implementation**
of the `Deque` interface in Java. It allows **insertion and removal from both ends**
(head and tail) with better performance than `LinkedList` in most cases.

üì¶ It is part of the `java.util` package.

---

### üîπ **Key Properties of ArrayDeque**
-------------------------------------------------------------------------------------
| Property                          | Description                                   |
|----------------------------------|------------------------------------------------|
| ‚úÖ **Implements**                | `Deque` (extends `Queue`)                      |
| üß± **Underlying Structure**       | **Resizable array** (circular buffer)         |
| üîÑ **Supports FIFO & LIFO**      | Acts like both Queue and Stack                 |
| ‚ùå **Nulls not allowed**         | Throws `NullPointerException`                  |
| üîÅ **Dynamic Resizing**          | Grows as needed, no fixed capacity             |
| ‚ùå **Thread-safe?**              | ‚ùå No ‚Äî not synchronized                       |
| üö´ **Random Access?**            | ‚ùå No ‚Äî unlike `ArrayList`                     |
| üß™ **Performance**               | Faster than `LinkedList` for Deque operations  |
-------------------------------------------------------------------------------------
---

### üîπ **Basic Operations**
----------------------------------------------------------------------- |
| Operation                       | Method(s)                           |
|--------------------------------|--------------------------------------|
| Add to front                   | `addFirst(E e)`, `offerFirst(E e)`   |
| Add to rear                    | `addLast(E e)`, `offerLast(E e)`     |
| Remove from front              | `removeFirst()`, `pollFirst()`       |
| Remove from rear               | `removeLast()`, `pollLast()`         |
| Peek front/rear (no remove)    | `peekFirst()`, `peekLast()`          |
| Acts as Stack                  | `push(E e)`, `pop()`                 |
| Acts as Queue                  | `offer(E e)`, `poll()`               |
-------------------------------------------------------------------------
---

### üîπ **Common Methods**
---------------------------------------------------------------------------
| Method                     | Description                                |
|---------------------------|---------------------------------------------|
| `add(E e)`                | Adds to the tail                            |
| `remove()`                | Removes from head                           |
| `element()`               | Retrieves head (throws exception if empty)  |
| `peek()`                  | Retrieves head (null if empty)              |
| `size()`                  | Returns number of elements                  |
| `clear()`                 | Empties the deque                           |
| `contains(Object o)`     | Checks if element exists                     |
---------------------------------------------------------------------------
---

### üö´ **Limitations**
- No capacity limit (but still memory-bound)
- Not thread-safe (use `ConcurrentLinkedDeque` or manually synchronize if needed)
- Cannot store `null` (unlike `LinkedList`)

---

## üÜö Comparison: **`ArrayDeque` vs `LinkedList` as Deque**
--------------------------------------------------------------------------------------------------------------------
| Feature                      | `ArrayDeque`                          | `LinkedList`                              |
|------------------------------|----------------------------------------|------------------------------------------|
| Implementation               | Resizable **array**                    | **Doubly linked list**                   |
| Performance                  | **Faster** for most Deque operations   | Slightly **slower** due to node creation |
| Memory Overhead              | Lower ‚Äì no node objects                | Higher ‚Äì stores `prev`/`next` refs       |
| Allows `null`                | ‚ùå **No**                              | ‚úÖ **Yes**                               |
| Thread-safe?                 | ‚ùå No                                   | ‚ùå No                                   |
| Random access                | ‚ùå No                                   | ‚ùå No                                   |
| Insert/delete at ends        | ‚úÖ Fast                                 | ‚úÖ Fast                                 |
| Acts as Queue and Stack      | ‚úÖ Yes                                  | ‚úÖ Yes                                  |
--------------------------------------------------------------------------------------------------------------------
---

## ‚úÖ When to Use What?
----------------------------------------------------------------------------------------
| Use Case                                  | Prefer                                   |
|-------------------------------------------|------------------------------------------|
| Frequent insert/remove at both ends       | Both work ‚Äî but **ArrayDeque is faster** |
| Need to allow `null`                      | Use `LinkedList`                         |
| Need minimal memory footprint             | Use `ArrayDeque`                         |
| Need to iterate or manipulate middle      | Use `LinkedList` (with `ListIterator`)   |
----------------------------------------------------------------------------------------
---

## üîÅ Summary

- **`ArrayDeque`** is a modern, fast, array-based Deque ‚Äî ideal for Stack and Queue operations.
- **`LinkedList`** is more flexible but heavier in memory and slightly slower for Deque operations.
- Both implement the **`Deque` interface** and can be used as **Queue (FIFO)** or **Stack (LIFO)**.

---
------------------------------------------------------------------------------------------------------------------------------------------------
Factor               | LinkedList                                                        | ArrayDeque                                           |
------------------------------------------------------------------------------------------------------------------------------------------------
Underlying Structure | Doubly Linked List (each node has prev & next references)         | Resizable Circular Array                             |
Memory Usage         | Higher: Each node stores actual data + 2 references (prev & next) | Lower: Stores only actual data in array              |
Cache Performance    | Poor: Nodes are scattered in memory                               | Excellent: Data stored in contiguous memory (array)  |
Access Time          | O(1) at ends, but worse random access                             | O(1) at both ends, but no random access too          |
Reallocation         | Not needed, but insertion/removal involves node objects           | Handled automatically, resizes when needed           |
Overhead             | More overhead due to Node objects                                 | Less overhead, faster GC-friendly                    |
Null Elements        | ‚úÖ Allowed                                                        | ‚ùå Not allowed (throws NullPointerException)         |
Speed                | Slower than ArrayDeque for most operations                         | Faster due to simple array-based structure          |
-------------------------------------------------------------------------------------------------------------------------------------------------

üß† Summary: When to Use What?
‚úÖ Use ArrayDeque if:

You want a fast and memory-efficient deque or queue.
You don‚Äôt need to store null.
You don‚Äôt care about index-based access or middle insertions.

‚úÖ Use LinkedList if:

You need to perform frequent middle insertions/deletions.
You want both List and Deque behavior.
You‚Äôre okay with a bit of performance overhead.