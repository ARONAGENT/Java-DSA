ArrayList is a part of the Java Collections Framework and is found in java.util package.
It is a resizable array implementation of the List interface â€” meaning, it can grow or shrink dynamically as elements are added or removed.

ðŸ”¹ Key Properties of ArrayList

Property	                    Description
Ordered     	        Maintains the insertion order of elements.
Allows Duplicates	    Yes, duplicate values are allowed.
Indexed Access	        Allows random access using index (like arrays).
Resizable	            Grows automatically when capacity is exceeded.
Not Synchronized	    Not thread-safe by default (can be made synchronized).
Can store null values	Yes, null values are allowed.
Generic Support	        Supports generics like ArrayList<String>.
Implements	            List, RandomAccess, Cloneable, Serializable interfaces.


ðŸ”¹ Basic Operations
Operation	    Method
Add element	    add(E e) or add(index, e)
Get element	    get(int index)
Remove element	remove(index) or remove(obj)
Update element	set(int index, E e)
Size of list	size()
Check presence	contains(Object o)
Clear all	    clear()
Looping	for, for-each, or iterator()


Internally uses a dynamic array.

Default initial capacity = 10.
Increases capacity by 50% when full.
If used in multithreaded environment, use:
Collections.synchronizedList(new ArrayList<>())
or use CopyOnWriteArrayList from java.util.concurrent.


ðŸ”’ Synchronized vs Non-Synchronized in Java Collections

Feature	        Synchronized Collections	                        Non-Synchronized Collections
Thread-Safety	Yes â€“ safe to use with multiple threads	            No â€“ not safe in multi-threaded apps
Performance	    Slower â€“ overhead of locking            	        Faster â€“ no locking involved
Examples	    Vector, Hashtable, Collections.synchronizedList()	ArrayList, HashMap, HashSet
Usage	        Use in multithreading environment	                Use in single-threaded environment

ðŸ”„ Additional Useful ArrayList Methods:

Method	Description
get(int index)	                Returns element at the specified position
set(int index, E element)	    Replaces element at specified index
add(E element)	                Adds element to end
add(int index, E element)	    Inserts element at specified index
remove(int index)	            Removes element at specified position
remove(Object o)	            Removes first occurrence of the element
clear()	                        Removes all elements from the list
contains(Object o)	            Checks if list contains specified element
indexOf(Object o)	            Returns index of first occurrence
lastIndexOf(Object o)	        Returns index of last occurrence
toArray()	                    Converts list to array
iterator()	                    Returns iterator for the list
ensureCapacity(int minCapacity)	Increases capacity of the list
trimToSize()	                Trims size to current list size
clone()	                        Returns shallow copy of the list
subList(int fromIndex,          Returns a portion of the list
int toIndex)


âœ… Making ArrayList Synchronized:
List<String> syncList = Collections.synchronizedList(new ArrayList<>());

Now the list can be safely accessed by multiple threads
â€” but still manual synchronization may be needed during iteration.