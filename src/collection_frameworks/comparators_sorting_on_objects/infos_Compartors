### ðŸ“˜ What is a Comparator in Java?

A **Comparator** in Java is an interface used to **define custom sorting logic** for objects.
It is part of the `java.util` package and allows you to sort objects in **multiple ways**, outside their natural ordering.

---

### ðŸ”¹ Key Points:
- A class that implements `Comparator<T>` must override the method:
  ```java
  int compare(T o1, T o2);
  ```
  - Returns:
    - Negative â†’ if `o1 < o2`
    - Zero â†’ if `o1 == o2`
    - Positive â†’ if `o1 > o2`
- It is useful when:
  - You donâ€™t want to or cannot modify the class to implement `Comparable`.
  - You want to define **multiple sorting logics** for the same class (e.g., by name, by rating, by year).

---

### ðŸ”§ Example Use Case:

You have a `Film` class and want to sort it:
- By **film name** â†’ `FilmName_Comparator`
- By **release year** â†’ `RelYr_Comparator`
- By **IMDb rating** â†’ `ImdbRating_Comparator`

Each of these comparators implements the `Comparator<Film>` interface and defines its own `compare()` logic.

---

### âœ… Advantages of Comparator:
- Enables sorting on **multiple fields** without changing the original class.
- Keeps your sorting logic **separate and reusable**.
- Works well with `Collections.sort()` or `List.sort()`.

--